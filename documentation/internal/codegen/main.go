package main

import (
	"encoding/json"
	"os"
	"text/template"
)

type chain struct {
	Name string `json:"name"`
}

func main() {
	chains, err := chainNames()
	if err != nil {
		panic(err)
	}

	generateREADME(chains)
	if err != nil {
		panic(err)
	}
}

// chainNames returns a slice of all names for the chains listed in chainList.json
func chainNames() ([]string, error) {
	var names []string
	var chains []chain
	f, err := os.ReadFile("chainList.json")
	if err != nil {
		return names, err
	}
	err = json.Unmarshal(f, &chains)
	if err != nil {
		return names, err
	}
	for _, chain := range chains {
		names = append(names, chain.Name)
	}
	return names, err
}

// generateREADME takes a generates the readme
func generateREADME(chainNames []string) error {
	tmpl, err := template.New("readme").Parse(readmeTemplate)
	if err != nil {
		panic(err)
	}
	err = tmpl.Execute(os.Stdout, struct {
		ChainNames []string
	}{
		ChainNames: chainNames,
	})
	if err != nil {
		panic(err)
	}
	return nil
}

const readmeTemplate string = `
# superchain-registry

> [!WARNING]
> This repository is a **work in progress**.  At a later date, it will be proposed to, and must be approved by, Optimism Governance.  Until that time, the configuration described here is subject to change.

The Superchain Registry is an index of chains which serves as the source of truth for who’s in the Superchain and what modifications they’ve made to their chains.

Today, the Superchain includes {{range $name := .ChainNames}}` + "\n * " + `{{$name}} {{end}}

## More about the Superchain Registry

The Superchain Registry hosts Superchain-configuration data in a minimal human-readable form and includes mainnet and testnet Superchain targets, along with their respective member chains.

Other configuration, such as contract-permissions and ` + "`SystemConfig`" + `parameters are hosted and governed onchain.

A list of chains in the registry can be seen in the top level` + "[`chainList.toml`]" + `(./chainList.toml) and ` + "[`chainList.json`]" + `(./chainList.json) files.
These files are autogenerated from scripts in the registry and will remain stable to build against.


## License

MIT License, see ` + "[`LICENSE` file]" + `(./LICENSE).
`
